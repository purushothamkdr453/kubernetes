Add the following Firewall rules to your VPC:
------------------------------------------------

Add the following rules to your VPC in which you will be creating k8s clusters.

Ingress - > tcp,udp,icmp,ipip -> from subnet range
Ingress -> tcp:22,tcp:6443,icmp -> 0.0.0.0/0

*********************************************************
Comands that should be executed on all nodes:
**********************************************************

update all the packages:
--------------------------

apt install net-tools

apt update

Disable swap:
-----------------------

swapoff -a 

or

sed -i '/swap/d' /etc/fstab

Enable "br_netfilter" module:
-----------------------------

lsmod | grep br_netfilter
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system

Install Docker:
-----------------------------

sudo apt-get update

sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo apt-key fingerprint 0EBFCD88

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

sudo apt-get update

sudo apt-get install -y docker-ce docker-ce-cli containerd.io

Installing kudeadm,kubelet,kubectl:
-------------------------------------

sudo apt-get update && sudo apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold docker-ce kubelet kubeadm kubectl

systemctl daemon-reload
systemctl restart kubelet


*************************************
Only on Master:
*************************************
Initalize:

kubeadm init --apiserver-advertise-address=10.0.1.9 --pod-network-cidr=192.168.0.0/16 

Install Calico:

curl https://docs.projectcalico.org/manifests/calico.yaml -O
kubectl apply -f calico.yaml

taint the master node, required to not to schedule any pods on master node.

kubectl taint master node-role.kubernetes.io/master=true:NoSchedule

**************************************
Only on worker nodes:
**************************************

Run the kubeadm join command generated by "kubeadm init"
